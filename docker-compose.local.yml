version: '3.7'

services:
  nginx:
    build:
      context: nginx.local
    depends_on:
      - wp
      - api
      - client
    container_name: nginx
    restart: always
    volumes:
      - ./nginx.local/conf/:/etc/nginx.local/conf.d/:ro
      #- ./certbot/www:/var/www/certbot/:ro
      #- ./certbot/conf/:/etc/nginx/ssl/:ro
    ports:
      - 80:80 #client
      - 81:81 #api
      - 85:85 #wp
      - 83:83 #phpmyadmin
    networks:
      - app-network

  #certbot:
  #  image: certbot/certbot
  #  container_name: certbot
  #  volumes:
  #    - ./certbot/www/:/var/www/certbot/:rw
  #    - ./certbot/conf/:/etc/letsencrypt/:rw
  #  #certbot certonly --webroot --webroot-path /var/www/certbot/ --dry-run -d example.org
  #  #certbot certonly --webroot --webroot-path /var/www/certbot/ -d dev.vechorka.ru

  db:
    image: mysql:5.7
    container_name: db
    volumes:
      - ./mysql:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD:-password}
      - MYSQL_DATABASE=${DB_NAME:-db}
      - MYSQL_USER=${DB_USER:-db_user}
      - MYSQL_PASSWORD=${DB_PASSWORD:-password}
    restart: always
    command: '--default-authentication-plugin=mysql_native_password --explicit_defaults_for_timestamp'
    networks:
      - app-network

  wp:
    image: wordpress
    container_name: wp
    restart: always
    volumes:
      - ./admin.wp/config/php.conf.ini:/usr/local/etc/php/conf.d/php.ini
      - ./admin.wp/wordpress:/var/www/html
      - ./admin.wp/wordpress/wp-config.php:/var/www/html/wp-config.php
    environment:
      - WORDPRESS_DB_HOST=${DB_HOST:-db}
      - WORDPRESS_DB_NAME=${DB_NAME:-wordpress}
      - WORDPRESS_DB_USER=${DB_USER:-root}
      - WORDPRESS_DB_PASSWORD=${DB_PASSWORD:-password}
      - WORDPRESS_TABLE_PREFIX=wp_
      - WORDPRESS_DEBUG=${WORDPRESS_DEBUG:-0}
    depends_on:
      - db
    env_file:
      - .env
    networks:
      - app-network

  api:
    build:
      context: api.nest
      target: production
    container_name: api
    depends_on:
      - db
    env_file:
      - .env
    #environment:
    #  - DB_HOST=${DB_HOST:-db}
    restart: always
    ports:
      - 10000:10000
    #command: npm run start:dev
    networks:
      - app-network

  client:
    build:
      context: client.next
      dockerfile: ./Dockerfile
      args:
        CLIENT_HOST: ${CLIENT_HOST}
        API_HOST: ${API_HOST}
        UPLOAD_HOST: ${UPLOAD_HOST}
    container_name: client
    depends_on:
      - api
      - wp
    env_file:
      - .env
    restart: always
    ports:
      - 3000:3000
    networks:
      - app-network

  phpmyadmin:
    depends_on:
      - db
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: always
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-password}
    networks:
      - app-network

networks:
  app-network:
    driver: bridge